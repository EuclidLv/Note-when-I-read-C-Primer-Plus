//CHAPTER 6 分支语句和逻辑运算符
//if测试条件将被强制转换为bool值，因此0将被转换为false；非零为true。
//整个if语句被视为一条语句

if (answer == 1492)
    statement 1;
else 
    statement 2;
//从语法上看，整个if else结构被视为一条语句




//if else if else结构实际上是一个if else包含在另一个if else中




//将variable = value转换为value = variable可以用以检查错误（误将==写成=）
//e.g. 3 = myNamber (3总是等于3不能将另一个值赋给）





//逻辑表达式

//||算术符是一个顺序点，也就是说先修改左边的值，再对右边的值进行判定

//&& 也是顺序点，因此将首先判定左侧，并且在右侧被判定之前产生所有的副作用

//C++确保程序从左向右进行计算逻辑表达式，并在知道答案后立刻停止

//char指针数组也可以标识一系列字符串，只要将每一个字符串的地址赋给各个数组元素即可

//if(17 < age < 35)的意思是
//if( (17 < age ) < 35)
//17 < age 的值要么为true要么为false都小于35，使用整个测试的结果总为true

//if(!(x>5))       //if(x<5) is clearer

//如果给读取int值的程序输入一个过大的值，很多C++实现只是将这个值截短为适合的大小，并不会通知丢失了数据

//！运算符的优先级高于所有关系运算符和算术运算符。
//因此要对表达式求反，必须用括号将其括起来

//逻辑AND运算符的优先级高于逻辑OR运算符






age > 30 && age < 45 || weight >300
//被解释为
(age >30 && age <45) || weight > 300 





//一个数被0除这是计算机没有定义的操作




&&       //另一种表示方法    and
||       //另一种表示方式    or
!       //另一种表示方式     not






//字符函数库 cctype
//这些函数返回类型为int，而不是bool，但通常bool转换让可以将它们视为bool型







//?运算符
//expression1 ? expression2 :expression3

5 > 3 ? 10: 12           //5>3 is true, so expression value is 10

((i < 2 ) ? ! i ? x[i] : y : x[1]);








//Switch语句

switch (integer-expression)
{
       case lable1:       statement(s)
       case lable2:       statement(s)
       ...
       default : statement(s)
}




//intreage-expression 必须是一个结果为整数的表达式
//每一个标签都必须是整数常量表达式，最常见的标签是int 或char   
//也可以是枚举量



//通常cin无法识别枚举类型（它不知道程序员是如何定义他们的），因此程序要求用户选择选项时输入一个整数。当switch语句将int值和枚举量标签进行比较时，将枚举量提升为int。
//在while循环测试条件中，也会将枚举量提升为int类型







//break和continue语句
//break ： 结束 ： 结束这个循环体
//continue ： 继续 ： 继续这个循环但不看执行到continue后面的代码

//循环中continue语句导致该程序跳过循环体的剩余部分，但不会跳过循环的更新表达式。
//在for循环中continue语句使程序调至更新表达式处，然后调至测试表达式处。然而，对于while循环来说，continue将使程序跳至测试表达式处，因此while循环体中位于continue之后的更新表达式都将被跳过。






//goto 语句
char ch;
	cin >> ch;
	if (ch == 'P')
		goto paris;
	cout << ...
	...
		paris: cout << "You've just arrived at Paris.\n";








//读取字符的循环
int n;
cin >> n;







//如果用户输入一个单词，而不是一个数字，情况将如何呢？发生这种类型不匹配的情况时，将发生4种类情况:
//1. n的值保持不变；
//2. 不匹配的输入将被留在队列中；
//3. cin对象中的一个错误标记被设置；
//4. 对cin方法的调用将返回false（如果被转换为bool型）









//可以用cin输入表达式的值来检测输入是不是数字
//1. 重置cin以接受新的输入                    //cin.clear()
//2. 删除错误输入
//3. 提示用户再输入
//程序必须先重制cin，然后才能删除错误输入

#include <iostream>
using namespace std;
const int Max = 5;
int main()
{
	//get data
	int golf[Max];
	cout << "Please enter your golf scores.\n";
	cout << "You must enter " << Max << "rounds.\n";
	int i=0;
	for (i = 0; i < Max; i++)
	{
		cout << "round #" << i + 1 << ": ";
		while (!(cin >> golf[i]))
		{
			cin.clear();                            //reset input
			while (cin.get() != '\n')
				continue;
			cout << "Please enter a number: ";
		}
	}
	//caculate average
	double total = 0.0;
	for (i - 0; i < Max; i++)
		total += golf[i];
	//report results
	cout << total / Max << " = average score " << Max << " roundes.\n";
 	return 0;
}






// 简单文件输入/输出



















